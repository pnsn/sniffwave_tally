#!/usr/bin/env python

from __future__ import print_function

# sniffwave-tally: Renate Hartog, PNSN May 2018
# 
# wrapper for sniffwave to tally late packets and gaps
# Largely based on latte.py: Victor Kress, PNSN 2014/9/16
# $Id$

import sys
import time
import re
import math
from subprocess import Popen,PIPE

LATENCY_THRESHOLD = 3.5 # good latency <= 3.5s
PENALTY = 30 # number of seconds added to gap duration to account for resetting processors
TOLERANCE = 1e-4 # tolerance when comparing begin and end time of packets to determine gaps and overlaps

#DAVN.BHZ.UW.-- (0x32 0x30) 0 i4  40  40.0 2018/05/24 01:43:32.53 (1527126212.5250) 2018/05/24 01:43:33.50 (1527126213.5000) 0x20 0x20 i2 m71 t19 len 224 [D:8173.7s F: 0.0s]
# match seismic channels only
rechan=re.compile(r'[B,H][H,N][E,N,Z,1,2,3]')
# sample rate is the first non-integer
resrate=re.compile(r'[0-9]+\.[0-9]+')
# start- and endtimes are numbers surrounded by parenthesis
retime=re.compile(r'\(([0-9\.]+)\)')
# latency is preceded by D and can be negative:
relat=re.compile(r'D:([\- 0-9\.]+)s')
# scnl 4 fields separated by periods
resncl=re.compile(r'^[A-Z0-9]+\.[A-Z0-9]+\.[A-Z0-9]+\.[A-Z0-9-]+')

usage='''Usage: sniffwave_analyzer.py RING_NAME [options]
where [options] includes all of the standard options for sniffwave
except 'n' and 'y'.  If time is not specified a default of 10 seconds
will be assumed. First 10 seconds of data will not be included in
statistics.
'''

default_seconds=10

def parseline(s):
    """
        Process a sniffwave output line

        Args:
            s (string): output line from running 'sniffwave RING_NAME sta chan net loc duration'

        Returns: 
            tuple (scnl, dt, starttime, endtime, latency) or None::
            0-scnl = STA.CHAN.NET.LOC
            1-dt = 1.0/sample_rate
            2-starttime = starttime of packet in unix epoch seconds
            3-endtime = endtime of packet in unix epoch seconds
            4-latency = difference in s between now and endtime of packet

    """
    srate = 1.
    scnl = s.lstrip().split(' ',1)[0]
    if s.rstrip()[-1] != ']':
        return None
    if not resncl.match(scnl): #line does not start with valid scnl
        return None
    chan = scnl.split(".")[1]
    if not rechan.match(chan):
        return None
    try:
        dt = 1.0/float(resrate.search(s).group(0)) # delta t is 1/sample_rate
        (starttime, endtime) = map(float,retime.findall(s))
        latency = float(relat.search(s).group(1))
    except Exception as e:
        print('could not parse\n{}: {}'.format(s,e))
        return None
    #if latency<0.0:
    #    print('{} second latency for {}. Ignoring.'.format(latency,scnl))
    #    return None
    return (scnl,dt,starttime,endtime,latency)

def average_stdev(x,x2,n):
    """
        Calculate approximation of standard deviation::
            stdev = sqrt( (x2)/n-(x/n)**2 )

        Args:
            x (float): summation of all values         
            x2 (float): summation of all squared values
            n (integer): number of values

        Returns:
            float: average of values
            float: approximate standard deviation
    """
    if n == 0:
        return x, n
    squared = (x2/n) - (x/n)*(x/n)
    if squared >= 0:
        stdev = math.sqrt(squared)
    else:
        stdev = 0.
    return x/n, stdev
    

def eew_stationreport_input(scnldict):
    """
        Args:
            fh: filename or open file handle
            scnldict (dict): keyed on scnl, has to have nested dict keys:
                             'starttime' : starttime of earliest packet in epoch seconds
                             'endtime'   : endtime of last packet in epoch seconds
                             'npackets'  : number of packets
                             'nlate'     : number of bad packets (latency > 3.5s)
                             'ngap'      : number of gaps between starttime and endtime
                             'gap_dur'   : total duration of gaps in seconds
                             'noverlap'  : number of overlaps between starttime and endtime
                             'overlap_dur' : total duration of overlaps in seconds
                             'n_oo'      : number of out-of-order packets
                             'oo_dur'    : total duration of out-of-order packets
        Returns:
            [string]: [scnl,starttime,endtime,duration,n,nlate,ngap,gap_dur]
    """
    sep = ","
    key_list = ["starttime", "endtime", "duration", "npackets", "nlate", "ngap", \
                "gap_dur", "noverlap", "overlap_dur", "n_oo", "oo_dur"]
    header_list = ["# scnl"]
    header_list.extend(key_list)
    header = sep.join(header_list) + "\n"
    lines = ""
    for scnl in scnldict:
        scnldict[scnl]["duration"] = scnldict[scnl]["endtime"] - scnldict[scnl]["starttime"]
        line = scnl
        for k in key_list:
            line += sep
            line += str(scnldict[scnl][k])
        line += "\n"
        lines += line
    return header + lines

def getStationDict(url='http://pnsn.org/stations.json'):
    '''gets station list from PNSN json feed and puts data into
    dictionary indexed on station and network name.
    stadict['sta']['net'].keys()=elev,lat,lon,type
    @return stadict - station dictionary'''
    import urllib
    import json
    u=urllib.urlopen(url)
    if not u:
        print('getStationDict() could not open {}'.format(url))
        return None
    l=u.readlines()
    u.close()
    d=json.loads(l[0],'UTF-8')
    stadict={}
    for s in d: #put into simpler station-keyed dictionary
        if not stadict.has_key(s['sta']):
            stadict[s['sta']]={}
        stadict[s['sta']][s['net']]={'elev':float(s['elev']),
                                     'lat':float(s['lat']),
                                     'lon':float(s['lon']),
                                     'type':s['type']}
    return stadict

if __name__=="__main__":
    """
        Runs sniffwave and provides latency, gap, out-of-order, and completeness metric for the duration requested.
        Args:
            ring_name(string): name of earthworm ring to sniff, e.g. WAVE_RING
            sta(string): station code to sniff for, use 'wild' for all
            chan(string): channel code to sniff for, use 'wild' for all
            net(string): network code to sniff for, use 'wild' for all
            loc(string): location code to sniff for, use 'wild' for all
            duration(float): duration in s to sniff for (optional, default=10s)
            --fname(string): name of output-file, if omitted, output goes to STDOUT
        Returns:
            int: status

        Example:
            sniffwave_analyzer WAVE_RING wild wild wild wild 600 > sniff_10min.txt

        prints the following metrics to STDOUT::
             scnl, starttime, endtime, number_good, number_bad, number_good_incl_penalty, number_bad_incl_penalty, ngaps, gap_duration
  
    """
    latlon=False
    seconds=None # duration of running sniffwave or interval of which output is written
    bindir="/home/eworm/bin" # path to sniffwave
    if len(sys.argv) >= 1:
        #set up command string
        try:
            index = sys.argv.index('--fname')
            filename = sys.argv[index+1]
            print("writing  to {}".format(filename))
            sys.argv.remove('--fname')
            sys.argv.pop(index)
        except:
            filename = None
        try:
            index = sys.argv.index('--bindir')
            bindir = sys.argv[index+1]
            sys.argv.remove('--bindir')
            sys.argv.pop(index)
        except:
            pass
        if '--latlon' in sys.argv:  #add lat-lon to output
            latlon=getStationDict()
            sys.argv.remove('--latlon')
        larg=sys.argv[-1]
        if larg.isdigit():
            seconds=int(larg)
        if not seconds:
            seconds=default_seconds
            if larg=='y' or larg=='n':
                sys.argv[-1]='%s'%seconds
            else:
                sys.argv.append('%s'%seconds)
        cmd=[bindir + '/sniffwave']+sys.argv[1:]
        unixstart=time.time()
    else:
        print(usage)
        sys.exit(0)

    #run program
    #print 'Accumulating statistics for %d seconds.  Please wait.'%seconds
    print(cmd)
    intervalstart = unixstart
    p=Popen(cmd,stdout=PIPE)
    output = p.stdout.readlines()
    if output:
    #with open("data/sniffwave.out","r") as output:
        scnldict={}
        for line in output:
            p=parseline(line)
            if p:
                (scnl,dt,starttime,endtime,lat)=p
                if endtime > intervalstart or endtime <= intervalstart: 
                    packlen = endtime - starttime
                    latency = lat + 0.5*packlen
                    if scnldict.has_key(scnl):
                        scnldict[scnl]['packet_length'] += packlen
                        scnldict[scnl]['packet_squared'] += packlen*packlen
                        scnldict[scnl]['latency'] += latency
                        scnldict[scnl]['latency_squared'] += latency*latency
                        scnldict[scnl]['npackets']+=1
                        if latency > LATENCY_THRESHOLD:
                            scnldict[scnl]['nlate'] += 1
                        if starttime - (scnldict[scnl]['prev_endtime'] + dt) > TOLERANCE:
                            # gap!
                            scnldict[scnl]['ngap'] += 1
                            scnldict[scnl]['gap_dur'] += (starttime-(scnldict[scnl]['prev_endtime']+dt))
                        if starttime - (scnldict[scnl]['prev_endtime'] + dt) < -1*TOLERANCE and \
                           starttime >= scnldict[scnl]['prev_starttime']:
                            # overlap!
                            scnldict[scnl]['noverlap'] += 1
                            scnldict[scnl]['overlap_dur'] += (starttime-(scnldict[scnl]['prev_endtime']+dt))
                        if endtime < scnldict[scnl]['prev_starttime']:
                            # starttime pre-dates a packet we've already seen, out-of-order!
                            scnldict[scnl]['n_oo'] += 1
                            scnldict[scnl]['oo_dur'] += packlen
                        scnldict[scnl]['prev_starttime'] = starttime
                        scnldict[scnl]['endtime'] = endtime
                        scnldict[scnl]['prev_endtime'] = endtime
                    else:
                        # first packet for this scnl
                        scnldict[scnl]={'starttime' : starttime,
                                        'prev_starttime' : starttime,
                                        'endtime' : endtime,
                                        'prev_endtime' : endtime,
                                        'ngap' : 0,
                                        'gap_dur' : 0.0,
                                        'noverlap' : 0,
                                        'overlap_dur' : 0.0,
                                        'n_oo' : 0,
                                        'oo_dur' : 0.0,
                                        'nlate' : 0,
                                        'packet_length':packlen,
                                        'packet_squared':packlen*packlen,
                                        'latency':latency,
                                        'latency_squared':latency*latency,
                                        'npackets':1}
                        # check if first packet is late
                        if latency > LATENCY_THRESHOLD:
                            scnldict[scnl]['nlate'] += 1

    # future to do: allow running continuously, with periodic output to a file.
    #continuous = False
    #if not continuous:
    # output at the end of the sniffwave run
    for scnl in scnldict:
        # get average latency and approximate stdev
        ave, stdev = average_stdev(scnldict[scnl]['latency'], \
                                       scnldict[scnl]['latency_squared'], \
                                       scnldict[scnl]['npackets'])
        scnldict[scnl]['latency'] = ave
        scnldict[scnl]['latency_stdev'] = stdev
        # get average packet length and approximate stdev
        ave, stdev = average_stdev(scnldict[scnl]['packet_length'], \
                                       scnldict[scnl]['packet_squared'], \
                                       scnldict[scnl]['npackets'])
        scnldict[scnl]['packet_length'] = ave
        scnldict[scnl]['packet_stdev'] = stdev

    # write to file, create file or append
    if filename:
        with open(filename,'a+') as fh:
            fh.write(eew_stationreport_input(scnldict))
    else:
        sys.stdout.write(eew_stationreport_input(scnldict))

    sys.exit(0)
